(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'first_name'"
p3
sS'layer'
p4
S'/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V3/PROJECT/web2py/applications/Cabshare/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport datetime\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    ###This is the function to display the home page.\n    ###1)Various trips,2)Notifications,3)Messages from other users.\n    ###1)Various trips code.\n    uname = db.auth_user(db.auth_user.id == auth.user_id).first_name\n    response.flash = T("Cabshare Welcomes you!!!!")\n    db(db.froms.id>0).delete()\n    db(db.tos.id>0).delete()\n    qr = (db.trip.total_tillnow < db.trip.max_people) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))\n    fa = db(qr).select(db.trip.from_place,db.trip.to_place)\n    froms=[]\n    tos=[]\n    for i in fa:\n        froms+=[i.from_place]\n        tos+=[i.to_place]\n    froms = list(set(froms))\n    tos = list(set(tos))\n    for i in froms:\n        db.froms.insert(place=i)\n    for i in tos:\n        db.tos.insert(place=i)\n    if len(request.args)>0:\n        pageno=int(request.args[0])\n    else:\n        pageno=0\n    Trips=db(qr).select(db.trip.ALL,limitby=(10*pageno,10*(pageno+1)+1))\n    ###The code for the trips is done here.\n    ###2) Notifications bar\n    nqr = db.notification.rec_id == auth.user_id\n    nans = db(nqr).select(limitby=(0,5),orderby=~status|~time_of)\n    tt=[]\n    name=[]\n    for k in nans:\n        qrr = db.aut_user.id == k.send_id\n        tt+=[ db.auth_user(qrr).Pp]\n        name+=[db.auth_user(qrr).first_name]\n    ###The notification related code ends here.\n    ###The messages code.\n    mqr = db.personal_message.rec_id == auth.user_id\n    mans = db(mqr).select()\n    ###The message code is done.\n    return locals()\n\n###This is the page which renders the form to float a trip.\n@auth.requires_login()\ndef start_trip():\n    form  = SQLFORM(db.trip)\n    if form.process().accepted:\n        #Updating the the till now parameters.\n        ppl = form.vars.people_start;\n        bags  = form.vars.bags_start;\n        currid = form.vars.id;\n        tmp = db.trip(db.trip.id == currid)\n        tmp.update_record(total_tillnow=ppl,bags_till_now=bags)\n        #Updating the number of trips for the user.\n        qr = db.auth_user.id==auth.user_id;\n        nt = 1 + int(db.auth_user(qr).trips_no);\n        db.auth_user(qr).update_record(trips_no=nt);\n        response.flash = T("Your trip has been registered")\n    elif form.errors:\n        response.flash = T("Trip details have errors")\n    else:\n        response.flash = T("Please fill the Trip details")\n\n    return locals()\n\n\n\n\n\n\n###Theese are the functions by default...\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n###A function to manage the users.\n#def manage():\n\n###Afunction for users to join others\' trip.\n@auth.requires_login()\ndef join_trip():\n    db(db.froms.id>0).delete()\n    db(db.tos.id>0).delete()\n    qr = (db.trip.total_tillnow < db.trip.max_people) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))\n    fa = db(qr).select(db.trip.from_place,db.trip.to_place)\n    froms=[]\n    tos=[]\n    for i in fa:\n        froms+=[i.from_place]\n        tos+=[i.to_place]\n    froms = list(set(froms))\n    tos = list(set(tos))\n    for i in froms:\n        db.froms.insert(place=i)\n    for i in tos:\n        db.tos.insert(place=i)\n    if len(request.args)>0:\n        pageno=int(request.args[0])\n    else:\n        pageno=0\n    Trips=db(qr).select(db.trip.ALL,limitby=(10*pageno,10*(pageno+1)+1))\n    return locals()\n\n###A function for users to serach for trips based on criteria\n@auth.requires_login()\ndef after_search():\n    if len(request.args)>4:\n        pageno=int(request.args[4])\n    else:\n        pageno=0\n    Trips=db((db.trip.max_people-db.trip.total_tillnow <= int(request.args[3])) & (db.trip.date_of_trip==request.args[2]) & (db.trip.from_place==request.args[0]) & (db.trip.to_place==request.args[1]) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))).select(db.trip.ALL,limitby=(10*pageno,10*(pageno+1)+1))\n    return locals()\n\n###A function to return a user\'s trips\n@auth.requires_login()\ndef mytrips():\n    if len(request.args)>0:\n        pageno1=int(request.args[0])\n    else:\n        pageno1=0\n    if len(request.args)>1:\n        pageno2=int(request.args[1])\n    else:\n        pageno2=0\n    if len(request.args)>2:\n        pageno3=int(request.args[2])\n    else:\n        pageno3=0\n    if len(request.args)>3:\n        pageno4=int(request.args[3])\n    else:\n        pageno4=0\n    qr1 = ((db.trip.date_of_trip < datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_end < datetime.datetime.now().time())))\n    qr2 = (db.trip.total_tillnow < db.trip.max_people) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))\n    PrevTripsasadmin=db((auth.user_id==db.trip.strid) & qr1).select(db.trip.ALL,limitby=(10*pageno3,10*(pageno3+1)+1))\n    PendTripsasadmin=db((auth.user_id==db.trip.strid) & qr2).select(db.trip.ALL,limitby=(10*pageno1,10*(pageno1+1)+1))\n    PrevTrips=db((auth.user_id==db.passenger.userid) & (db.passenger.tripid==db.trip.id) & qr1).select(db.trip.ALL,limitby=(10*pageno4,10*(pageno4+1)+1))\n    PendTrips=db((auth.user_id==db.passenger.userid) & (db.passenger.tripid==db.trip.id) & qr2).select(db.trip.ALL,limitby=(10*pageno2,10*(pageno2+1)+1))\n    return locals()\n\n###A function to return form to search for trips\n@auth.requires_login()\ndef form():\n    form = SQLFORM.factory(Field(\'fro\',\'string\',label=\'From\',requires=IS_NOT_EMPTY(),widget=SQLFORM.widgets.autocomplete(\nrequest, db.froms.place, limitby=(0,10), min_length=1)),\n                          Field(\'to\',\'string\',requires=IS_NOT_EMPTY(),widget=SQLFORM.widgets.autocomplete(\nrequest, db.tos.place, limitby=(0,10), min_length=1)),\n                          Field(\'Date\',\'date\',requires=IS_NOT_EMPTY()),\n                          Field(\'Passengers\',\'integer\',requires=IS_NOT_EMPTY()))\n    if form.process().accepted:\n        response.flash="Please Fill the form."\n        redirect(URL(\'after_search\',args=[form.vars.fro,form.vars.to,form.vars.Date,form.vars.Passengers]))        \n        print "hello"\n    elif form.process().errors:\n        print "sorry"\n        response.flash="Errors in search query"\n    else:\n        print "atleast this."\n        response.flash="Please fill all fields"\n    return form\n\n@auth.requires_login()\ndef voting():\n    form=SQLFORM(db.voting)\n    return locals()\n\n###A function to view details of trip and user and to send him request to join him.\n@auth.requires_login()\ndef particular():\n    userid=auth.user_id\n    trip=db.trip[request.args[0]]\n    user=db.auth_user[trip.strid]\n    flag=db((db.notification.send_id==userid) & (db.notification.tripid==trip.id)).select(db.trip.ALL)\n    if len(flag)==1:\n        flag=1\n    else:\n        flag=0\n    return locals()\n\n###A function to view passengers of trip and to accept requests to join trip.\n@auth.requires_login()\ndef particularasadmin():\n    trip=db.trip[request.args[0]]\n    requests=db((db.notification.type_of==1) & (db.notification.rec_id==auth.user_id) & (db.notification.tripid==trip.id) & (db.notification.send_id==db.auth_user.id) & ((db.auth_user.id!=db.passenger.userid) | (trip.id!=db.passenger.tripid))).select(db.auth_user.ALL)\n    accepted=db((trip.id==db.passenger.tripid) & (db.auth_user.id==db.passenger.userid)).select(db.auth_user.ALL)\n    return locals()\n\n###A computer generated notification\n@auth.requires_login()\ndef create_notification():\n    ###If first argument is 1,it is a requst to join the trip from sender to receiver.\n    if int(request.args[0])==1:\n        msg=request.args[4]+\' has sent request to share the cab with you.\'\n        db.notification.insert(send_id=int(request.args[3]),rec_id=int(request.args[2]),tripid=int(request.args[1]),msg=msg,date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=1,status=0)\n    elif int(request.args[0])==2:\n        msg=request.args[4]+\' has sent request to share the cab with you.\'\n        db.notification.insert(send_id=int(request.args[2]),rec_id=int(request.args[3]),tripid=int(request.args[1]),msg=msg,date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=2,status=0)\n        db.passenger.insert(userid=int(request.args[3]),tripid=int(request.args[1]))\n        db(db.trip.id==int(request.args[1])).update(total_tillnow=db.trip.total_tillnow+1)\n    redirect(URL(\'index\'))\n    return locals()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V3/PROJECT/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V3/PROJECT/web2py/applications/Cabshare/controllers/default.py", line 254, in <module>\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V3/PROJECT/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V3/PROJECT/web2py/applications/Cabshare/controllers/default.py", line 22, in index\n    uname = db.auth_user(db.auth_user.id == auth.user_id).first_name\nAttributeError: \'NoneType\' object has no attribute \'first_name\'\n'
p11
s.