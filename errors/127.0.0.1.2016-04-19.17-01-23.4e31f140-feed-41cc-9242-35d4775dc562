(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'reuest' is not defined"
p3
sS'layer'
p4
S'/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V5/PROJECT/web2py/applications/Cabshare/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport datetime\n@auth.requires_login()\ndef index():\n    reqdate=(datetime.datetime.now() - datetime.timedelta(days=1)).date()\n    flag=db((db.trip.date_of_trip==reqdate) & (db.notification.tripid==db.trip.id) & (db.notification.type_of==3)).select()\n    if len(flag)==0:\n        flag=db(db.trip.date_of_trip==reqdate).select()\n        for i in flag:\n            flag1=db(db.passenger.tripid==i.id).select()\n            for j in flag1:\n                db.notification.insert(send_id=i.strid,rec_id=j.userid,tripid=i.id,msg="Please give feedback",date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=3,status=0,flag_of=0,no_of=0)\n    form  = SQLFORM(db.trip)\n    if form.process().accepted: \n        #Updating the the till now parameters.\n        ppl = form.vars.people_start;\n        bags  = form.vars.bags_start;\n        currid = form.vars.id;\n        tmp = db.trip(db.trip.id == currid)\n        tmp.update_record(total_tillnow=ppl,bags_till_now=bags)\n        #Updating the number of trips for the user.\n        qr = db.auth_user.id==auth.user_id;\n        nt = 1 + int(db.auth_user(qr).trips_no);\n        db.auth_user(qr).update_record(trips_no=nt);\n        response.flash = T("Your trip has been registered")\n    elif form.errors:\n        response.flash = T("Trip details have errors")\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    form1 = SQLFORM.factory(Field(\'fro\',\'string\',label=\'From\',requires=IS_NOT_EMPTY(),widget=SQLFORM.widgets.autocomplete(\nrequest, db.froms.place, limitby=(0,10), min_length=1)),\n                          Field(\'to\',\'string\',requires=IS_NOT_EMPTY(),widget=SQLFORM.widgets.autocomplete(\nrequest, db.tos.place, limitby=(0,10), min_length=1)),\n                          Field(\'Date\',\'date\',requires=IS_NOT_EMPTY()),\n                          Field(\'Passengers\',\'integer\',requires=IS_NOT_EMPTY()))\n    if form1.process().accepted:\n        redirect(URL(\'after_search\',args=[form1.vars.fro,form1.vars.to,form1.vars.Date,form1.vars.Passengers]))\n    elif form1.process().errors:\n        response.flash="Errors in search query"\n    ###The form porion of the code is done and now the main elements.\n    ###This is the function to display the home page.\n    ###1)Various trips,2)Notifications,3)Messages from other users.\n    ###1)Various trips code.\n    uname = db.auth_user(db.auth_user.id == auth.user_id).first_name\n    response.flash = T("Cabshare Welcomes you!!!!")\n    db(db.froms.id>0).delete()\n    db(db.tos.id>0).delete()\n    qr = (db.trip.strid!=auth.user_id) & (db.trip.total_tillnow < db.trip.max_people) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))\n    fa = db(qr).select(db.trip.from_place,db.trip.to_place)\n    froms=[]\n    tos=[]\n    for i in fa:\n        froms+=[i.from_place]\n        tos+=[i.to_place]\n    froms = list(set(froms))\n    tos = list(set(tos))\n    for i in froms:\n        db.froms.insert(place=i)\n    for i in tos:\n        db.tos.insert(place=i)\n    if len(request.args)>0:\n        pageno=int(request.args[0])\n    else:\n        pageno=0\n    Trips=db(qr).select(db.trip.ALL,limitby=(7*pageno,7*(pageno+1)+1))\n    ###The code for the trips is done here.\n    ###2) Notifications bar\n    nqr = db.notification.rec_id == auth.user_id\n    nans = db(nqr).select(orderby=db.notification.status|~db.notification.time_of)\n    tt=[]\n    name=[]\n    ids=[]\n    ###make the status one when he visits the page. \n    for k in nans:\n        qrr = db.auth_user.id == k.send_id\n        tt+=[db.auth_user(qrr).Pp]\n        name+=[db.auth_user(qrr).first_name]\n        ids+=[db.auth_user(qrr).id]\n    ###The notification related code ends here.\n    ###The messages code.\n    mqr = db.personal_message.rec_id == auth.user_id\n    mans = db(mqr).select()\n    mn=[];tm=[];dt=[]\n    #for j in mans:\n    ###The message code is done.\n    return locals()\n\n###This is a function to render the feedback form and get feedback.\ndef fill_feedback():\n    tid = request.args(0,cast=int)\n    qr = db.trip.id == tid\n    trip = db.trip(qr)\n    main = trip.strid\n    others  = db(db.passenger.tripid==tid).select()\n    num = trip.total_tillnow\n    return locals()\n###This is a background Java-script function to accept and reject feedback and to create notifications with regard to it.\ndef form_feed():\n    k = request.args(0,cast=int)\n    if k==1:\n        cmt=request.vars.cmt\n        rt=request.vars.rating;cid= reuest.vars.dummy;tid=request.vars.tid;  \n        db.voting.insert(voterid=auth.user_id,candid=cid,tripid=tid,time_of=datetime.datetime.now().time(),date_of=datetime.date.today(),rating=rt,comm=cmt,fill_status=1)\n        print cmt\n        print "The vote has been inserted."\n        #creating a view feedback-notification.\n        db.notification.insert(send_id=auth.user_id,rec_id=cid,tripid=tid,msg=cid + "has given his feedack about you.",date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=4,status=0,flag_of=0,no_of=0)\n        print "Notification is inserted."\n        #updating the rating of the person and the votes_no.\n        rate =  db.auth_user(db.auth_user.id == cid).depend_rate\n        novot = db.auth_user(db.auth_user.id == cid).votes_no\n        sumt = novot*rate\n        ns = sumt + rt;nnvt = novot + 1\n        nrt = ns/nnvt;\n        db.auth_user(db.auth_user.id == cid).update_record(depend_rate=nrt,votes_no=nnvt)\n        print "The user is updated."\n    elif k==0:\n        cid= reuest.vars.dummy;tid=request.vars.tid\n        db.voting.insert(voterid=auth.user_id,candid=cid,tripid=tid,time_of=datetime.datetime.now().time(),date_of=datetime.date.today(),rating=form.vars.rating,comm=form.vars.comm,fill_status=-1)\n        return locals()\n\n###This is a page to display the feedback given by others for a trip.\ndef view_feedback():\n    return locals()\n\n###Just a simple page to show all the notifications in separate page.\ndef ntf():\n    nqr = db.notification.rec_id == auth.user_id\n    if len(request.args)>0:\n        pageno=int(request.args[0])\n    else:\n        pageno=0\n    nans = db(nqr).select(limitby=(pageno*7,(pageno+1)*7+1),orderby=~db.notification.status|~db.notification.time_of)\n    tt=[];name=[];ids=[]\n    for k in nans:\n        qrr = db.auth_user.id == k.send_id\n        tt+=[ db.auth_user(qrr).Pp]\n        name+=[db.auth_user(qrr).first_name]\n        ids+=[db.auth_user(qrr).id]\n    return locals()\n\n###This is a simple function called by ajax to just change the status of the notifiacation.\ndef nvis():\n    #print "hi" + request.args[0] \n    nid = request.args(0,cast=int)\n    qr = db.notification.id == nid\n    db.notification(qr).update_record(status=1)\n    #print "hello"\n    return locals()\n\n\n###Theese are the functions by default...\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n###A function to manage the users.\n#def manage():\n\n###A function for users to serach for trips based on criteria\n@auth.requires_login()\ndef after_search():\n    if len(request.args)>4:\n        pageno=int(request.args[4])\n    else:\n        pageno=0\n    Trips=db((db.trip.max_people-db.trip.total_tillnow >= int(request.args[3])) & (db.trip.strid!=auth.user_id) & (db.trip.date_of_trip==request.args[2]) & (db.trip.to_place==request.args[1]) & ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))).select(db.trip.ALL,limitby=(7*pageno,7*(pageno+1)+1))\n    #& (db.trip.from_place==request.args[0]) \n    return locals()\n\n###A function to return a user\'s trips\n@auth.requires_login()\ndef PendingTrips():\n    if len(request.args)>0:\n        pageno1=int(request.args[0])\n    else:\n        pageno1=0\n    if len(request.args)>1:\n        pageno2=int(request.args[1])\n    else:\n        pageno2=0\n    qr2 = ((db.trip.date_of_trip > datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_up > datetime.datetime.now().time())))\n    PendTripsasadmin=db((auth.user_id==db.trip.strid) & qr2).select(db.trip.ALL,limitby=(7*pageno1,7*(pageno1+1)+1))\n    PendTrips=db((auth.user_id==db.passenger.userid) & (db.passenger.tripid==db.trip.id) & qr2).select(db.trip.ALL,limitby=(7*pageno2,7*(pageno2+1)+1))\n    return locals()\n\n@auth.requires_login()\ndef PrevTrips():\n    if len(request.args)>0:\n        pageno1=int(request.args[2])\n    else:\n        pageno1=0\n    if len(request.args)>1:\n        pageno2=int(request.args[3])\n    else:\n        pageno2=0\n    qr1 = ((db.trip.date_of_trip < datetime.date.today()) | ((db.trip.date_of_trip==datetime.date.today()) & (db.trip.start_end < datetime.datetime.now().time())))\n    PrevTripsasadmin=db((auth.user_id==db.trip.strid) & qr1).select(db.trip.ALL,limitby=(7*pageno1,7*(pageno1+1)+1))\n    PrevTrips=db((auth.user_id==db.passenger.userid) & (db.passenger.tripid==db.trip.id) & qr1).select(db.trip.ALL,limitby=(10*pageno2,10*(pageno2+1)+1))\n    return locals()\n\n@auth.requires_login()\ndef voting():\n    form=SQLFORM(db.voting)\n    return locals()\n\n###A function to view details of trip and user and to send him request to join him.\n@auth.requires_login()\ndef particular():\n    userid=auth.user_id\n    trip=db.trip[request.args[0]]\n    seT=[]\n    i=0\n    while i < (int(trip.max_people-trip.total_tillnow)):\n        seT.append(i+1)\n        i+=1\n    form=SQLFORM.factory(Field(\'No_of_people\',\'integer\',requires=IS_IN_SET(seT)))\n    user=db.auth_user[trip.strid]\n    if form.process().accepted:\n        redirect(URL(\'create_notification\',args=[1,trip.id,trip.strid,userid,user.username,form.vars.No_of_people]))\n    elif form.process().errors:\n        response.flash="Enter a number less than vacant seats"\n    flag=db((db.notification.send_id==userid) & (db.notification.tripid==trip.id)).select(db.trip.ALL)\n    if len(flag)>0:\n        flag=1\n    else:\n        flag=0\n    return locals()\n\n###A function to view passengers of trip and to accept requests to join trip.\n@auth.requires_login()\ndef particularasadmin():\n    trip=db.trip[request.args[0]]\n    comments=db(db.tc.tid==trip.id).select(db.tc.ALL)\n    qr=(db.notification.type_of==1) & (db.notification.tripid==trip.id) & (db.notification.flag_of==0) &(db.notification.send_id==db.auth_user.id)\n    requests=db(qr).select(db.auth_user.ALL)\n    notif=db(qr).select(db.notification.ALL)\n    accepted=db((trip.id==db.passenger.tripid) & (db.auth_user.id==db.passenger.userid)).select(db.auth_user.ALL)\n    return locals()\n\ndef particularwithcomm():\n    curr=auth.user_id\n    trip=db.trip[request.args[0]]\n    starter=db.auth_user[trip.strid]\n    comments=db(db.tc.tid==trip.id).select(db.tc.ALL)\n    passengers=db((db.passenger.tripid==trip.id) & (db.passenger.userid==db.auth_user.id)).select(db.auth_user.ALL)\n    return locals()\n\n###A computer generated notification creating fucntion.\n@auth.requires_login()\ndef create_notification():\n    ###If first argument is 1,it is a requst to join the trip from sender to receiver.\n    if int(request.args[0])==1:\n        msg=request.args[4]+\' has sent request to share the cab with you.\'\n        db.notification.insert(send_id=int(request.args[3]),rec_id=int(request.args[2]),tripid=int(request.args[1]),msg=msg,date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=1,status=0,flag_of=0,no_of=int(request.args[5]))\n    elif int(request.args[0])==2:\n        msg=request.args[2]+\' has accepted you request.\'\n        db.notification.insert(send_id=int(request.args[2]),rec_id=int(request.args[3]),tripid=int(request.args[1]),msg=msg,date_of=datetime.date.today(),time_of=datetime.datetime.now().time(),type_of=2,status=0,flag_of=0,no_of=int(request.args[5]))\n        db.passenger.insert(userid=int(request.args[3]),tripid=int(request.args[1]),no_of=int(request.args[5]))\n        db((db.notification.tripid==request.args[1]) & (db.notification.send_id==request.args[3]) & (db.notification.type_of==1)).update(flag_of=1)\n        db(db.trip.id==int(request.args[1])).update(total_tillnow=db.trip.total_tillnow+request.args[5])\n    redirect(URL(\'PendingTrips\'))\n    return locals()\n\n###A function called on clicking the profile pictures to see the profile details of the user.\n@auth.requires_login()\ndef profile_view():\n    usrid = request.args(0,cast=int)\n    info  = db.auth_user(db.auth_user.id==usrid)\n    qr = db.voting.candid == usrid\n    cms = db(qr).select(orderby=~db.voting.time_of,limitby=(0,5))\n    img=[];udrid=[];nms=[]\n    cnt=0;ck=0\n    for j in cms:\n        ck = ck+1\n        udrid +=[j.voterid]\n        img+=[db.auth_user(db.auth_user.id == udrid).Pp]\n        nms+=[db.auth_user(db.auth_user.id == udrid).first_name]\n    return locals()\n\ndef myprofile():\n    redirect("http://127.0.0.1:8000/Cabshare/default/user/profile?_next=/Cabshare/default/myprofile")\n    return locals()\n\nresponse._vars=response._caller(form_feed)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V5/PROJECT/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V5/PROJECT/web2py/applications/Cabshare/controllers/default.py", line 331, in <module>\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V5/PROJECT/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/krishna/ACADEMICS/SEM(1-2)/ASGN AND QUESTIONS/ITWS-2/PROJECT/V5/PROJECT/web2py/applications/Cabshare/controllers/default.py", line 115, in form_feed\n    rt=request.vars.rating;cid= reuest.vars.dummy;tid=request.vars.tid;\nNameError: global name \'reuest\' is not defined\n'
p11
s.