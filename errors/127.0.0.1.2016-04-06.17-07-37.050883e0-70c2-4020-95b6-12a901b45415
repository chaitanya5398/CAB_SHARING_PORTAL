(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'builtin_function_or_method' object has no attribute 'time'"
p3
sS'layer'
p4
S'/ug/ug2k15/cse/kolisetti.vamsi/web2py/applications/Cabshare/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport datetime\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n###This is the page which renders the form to float a trip.\n@auth.requires_login()\ndef start_trip():\n    form  = SQLFORM(db.trip)\n    if form.process().accepted:\n        #Updating the the till now parameters.\n        ppl = form.vars.people_start;\n        bags  = form.vars.bags_start;\n        currid = form.vars.id;\n        tmp = db.trip(db.trip.id == currid)\n        tmp.update_record(total_tillnow=ppl,bags_till_now=bags)\n        #Updating the number of trips for the user.\n        qr = db.auth_user.id==auth.user_id;\n        nt = 1 + int(db.auth_user(qr).trips_no);\n        db.auth_user(qr).update_record(trips_no=nt);\n        response.flash = T("Your trip has been registered")\n    elif form.errors:\n        response.flash = T("Trip details have errors")\n    else:\n        response.flash = T("Please fill the Trip details")\n\n    return locals()\n\n\n\n\n\n\n###Theese are the functions by default...\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n###A function to manage the users.\n#def manage():\n\n###Afunction for users to join others\' trip.\n@auth.requires_login()\ndef join_trip():\n    if len(request.args)>0:\n        pageno=int(request.args[0])\n    else:\n        pageno=0\n    Trips=db((db.trip.total_tillnow < db.trip.max_people) & (db.trip.date_of_trip > datetime.date.today())).select(db.trip.ALL,limitby=(10*pageno,10*(pageno+1)+1))\n    return locals()\n\n###A function for users to serach for trips based on criteria\n@auth.requires_login()\ndef after_search():\n    if len(request.args)>4:\n        pageno=int(request.args[4])\n    else:\n        pageno=0\n    Trips=db((db.trip.max_people-db.trip.total_tillnow <= int(request.args[3])) & (db.trip.date_of_trip==request.args[2]) & (db.trip.from_place==request.args[0]) & (db.trip.to_place==request.args[1]) & (db.trip.date_of_trip > datetime.date.today())).select(db.trip.ALL,limitby=(10*pageno,10*(pageno+1)+1))\n    return locals()\n\n###A function to return a user\'s trips\n@auth.requires_login()\ndef mytrips():\n    if len(request.args)>0:\n        pageno1=int(request.args[0])\n        if len(request.args)>1:\n            pageno2=int(request.args[1])\n        else:\n            pageno2=0\n    else:\n        pageno1=0\n        pageno2=0\n    PrevTrips=db( db.trip.date_of_trip < datetime.date.today() ).select(db.trip.ALL,limitby=(10*pageno1,10*(pageno1+1)+1))\n    PendingTrips=db( db.trip.date_of_trip > datetime.date.today() ).select(db.trip.ALL,limitby=(10*pageno2,10*(pageno2+1)+1))\n    return locals()\n\n###A function to return form to search for trips\n@auth.requires_login()\ndef form():\n    form = SQLFORM.factory(Field(\'fro\',\'string\',label=\'From\',requires=IS_NOT_EMPTY()),\n                          Field(\'to\',\'string\',requires=IS_NOT_EMPTY()),\n                          Field(\'Date\',\'date\',requires=IS_NOT_EMPTY()),\n                          Field(\'Passengers\',\'integer\',requires=IS_NOT_EMPTY()))\n    if form.process().accepted:\n        redirect(URL(\'after_search\',args=[form.vars.fro,form.vars.to,form.vars.Date,form.vars.Passengers]))\n    elif form.process().errors:\n        response.flash="Errors in search query"\n    else:\n        response.flash="Please fill all fields"\n    return form\n\n@auth.requires_login()\ndef voting():\n    form=SQLFORM(db.voting)\n    return locals()\n\n###A function to view details of trip and user and to send him request to join him.\n@auth.requires_login()\ndef particular():\n    userid=auth.user_id\n    trip=db.trip[request.args[0]]\n    user=db.auth_user[trip.strid]\n    return locals()\n\n###A computer generated notification\n@auth.requires_login()\ndef create_notification():\n    ###If first argument is 1,it is a requst to join the trip from sender to receiver.\n    if request.args[0]==1:\n        msg=request.args[4]+\' has sent request to share the cab with you.\'\n    db.notification.insert(send_id=int(request.args[3]),rec_id=int(request.args[2]),msg=\'msg\',date_of=datetime.date.today(),time_of=datetime.datetime.now.time(),status=0)\n    return locals()\n\nresponse._vars=response._caller(create_notification)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/ug/ug2k15/cse/kolisetti.vamsi/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/ug/ug2k15/cse/kolisetti.vamsi/web2py/applications/Cabshare/controllers/default.py", line 164, in <module>\n  File "/ug/ug2k15/cse/kolisetti.vamsi/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/ug/ug2k15/cse/kolisetti.vamsi/web2py/gluon/tools.py", line 4250, in f\n    return action(*a, **b)\n  File "/ug/ug2k15/cse/kolisetti.vamsi/web2py/applications/Cabshare/controllers/default.py", line 161, in create_notification\n    db.notification.insert(send_id=int(request.args[3]),rec_id=int(request.args[2]),msg=\'msg\',date_of=datetime.date.today(),time_of=datetime.datetime.now.time(),status=0)\nAttributeError: \'builtin_function_or_method\' object has no attribute \'time\'\n'
p11
s.